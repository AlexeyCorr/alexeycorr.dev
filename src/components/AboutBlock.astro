---
import { getEntry } from 'astro:content';

const { data } = await getEntry('about', 'about');
---

<section class="about-block container">
  <strong class="about-block__accent"></strong>

  <h1 class="about-block__title">
    {data.title}
  </h1>

  <picture class="about-block__picture">
    <source
      srcset="../assets/img/about/hi@1x.webp 1x, ../assets/img/about/hi@2x.webp 2x"
      type="image/webp"
    >
    <img
      src="../assets/img/about/hi@1x.jpg"
      srcset="../assets/img/about/hi@2x.jpg 2x"
      width="535"
      height="570"
      loading="eager"
      decoding="sync"
      alt="Алексей в костюме зайца"
    >
  </picture>

  <div class="about-block__content">
    {data.descriptions.map((description: string) => (
      <p class="about-block__description">{description}</p>
    ))}
  </div>
</section>

<script>
  const TYPING_SPEED = 250
  const TYPING_DELAY = 5000
  const element = document.querySelector('.about-block__accent')
  const greetings = ['안녕', 'こんにちは', 'Hello', 'Привет', 'Hola', '你好', 'Sain uu', 'Xin chào', 'გამარჯობა', 'Привит', 'Shalom', 'Aloha', 'Salom']

  const typing = () => {
    let textIndex = 0
    let index = 0
    let interval: ReturnType<typeof setInterval>
    let timeout: ReturnType<typeof setTimeout>

    const type = (str: string) => {
      interval = setInterval(() => {
        if (index > str.length) {
          clearInterval(interval)
          element?.classList.add('about-block__accent--animate')

          timeout = setTimeout(() => {
            backspace(str)
          }, TYPING_DELAY)
        } else {
          clearTimeout(timeout)
          element?.classList.remove('about-block__accent--animate')
          element && (element.textContent = str.slice(0, index))
          index++
        }
      }, TYPING_SPEED)
    }

    const backspace = (str: string) => {
      interval = setInterval(() => {
        if (index < 0) {
          clearInterval(interval)
          element?.classList.add('about-block__accent--animate')

          timeout = setTimeout(() => {
            index = 0
            textIndex = textIndex === (greetings.length - 1) ? 0 : ++textIndex
            type(greetings[textIndex])
          }, TYPING_SPEED)
        } else {
          clearTimeout(timeout)
          element?.classList.remove('about-block__accent--animate')
          element && (element.textContent = str.slice(0, index))
          index--
        }
      }, TYPING_SPEED)
    }

    type(greetings[textIndex])
  }

  typing()
</script>

<style lang="scss">
  .about-block {
    padding-bottom: 60px;

    @media (min-width: 1024px) {
      display: grid;
      grid-column-gap: 20px;
      grid-template-columns: repeat(2, 1fr);
      padding-bottom: 120px;
    }

    @media (min-width: 1280px) {
      grid-column-gap: 48px;
    }
  }
  .about-block__accent {
    display: block;
    margin-top: 20px;
    margin-bottom: 20px;
    color: var(--accent-color);
    font-family: 'Neue Machina';
    font-size: clamp(42px, 10vw, 96px);
    font-weight: 800;

    @media (min-width: 1024px) {
      grid-column: 1/-1;
      margin-top: 48px;
    }

    &::after {
      content: '|';
      animation: none;
    }

    &--animate::after {
      animation: blink 1s infinite;
    }
  }

  .about-block__title {
    font-family: 'Neue Machina';
    font-weight: 800;
    margin-top: 0;
    margin-bottom: 24px;
    font-size: clamp(32px, 10vw, 48px);
    line-height: 1;


    @media (min-width: 1024px) {
      grid-column: 2/3;
    }
  }

  .about-block__picture {
    display: block;
    margin-bottom: 24px;

    @media (min-width: 1024px) {
      grid-row: 2/4;
      grid-column: 1/2;
      padding-top: 64px;
    }

    @media (min-width: 1280px) {
      margin-left: auto;
    }

    img {
      display: block;
    }
  }

  .about-block__description {
    margin-top: 0;
    margin-bottom: 0;

    &:not(:last-of-type) {
      margin-bottom: 16px;
    }
  }

  @keyframes blink {
    0%, 100% {opacity: 1;}
    50% {opacity: 0;}
  }
</style>
