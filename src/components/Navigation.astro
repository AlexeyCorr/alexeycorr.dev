---
interface Props {
	menu: Array<object>
  toggleText: string
}

const { menu, toggleText } = Astro.props;
---

<nav class="navigation">
  <button
    class="navigation__toggle"
    type="button"
    aria-label={toggleText}
    aria-expanded="false"
    aria-controls="menu"
  >
    <span class="navigation__toggle-line"></span>
  </button>

  <div class="menu">
    <ul class="menu__list">
      {menu.map((item: any) => (
        <li class="menu__item">
          <a class="menu__link" href={item.link}>
            {item.title}
          </a>
        </li>
      ))}
    </ul>
  </div>
</nav>

<script>
  const toggle: HTMLElement | null = document.querySelector('.navigation__toggle')
  const menu: HTMLElement | null = document.querySelector('.menu')
  let isOpened = false

  const toggleView = () => {
    isOpened = !isOpened
    toggle.ariaExpanded = isOpened
    menu?.classList.toggle('menu--opened', isOpened)
  }

  const openMenu = () => {
    toggleView()
    menu?.addEventListener('click', menuClickHandler)
  }

  const closeMenu = () => {
    toggleView()
    menu?.removeEventListener('click', menuClickHandler)
  }

  const menuClickHandler = (evt: MouseEvent) => {
    const link = (evt.target as HTMLElement).closest('.menu__link')

    if (link) {
      closeMenu()
    }
  }

  toggle?.addEventListener('click', () => {
    isOpened ? closeMenu() : openMenu()
  })
</script>

<style lang="scss">
  @use '@/styles/variables' as *;
  @use '@/styles/mixins' as *;

  .navigation__toggle {
    @include inpres;

    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 4px;
    padding: 4px;
    width: 40px;
    height: 40px;
    border: none;
    cursor: pointer;
    z-index: 30;
    border-radius: 50%;

    @media (min-width: $lg) {
      display: none;
    }
  }

  .navigation__toggle-line {
    position: relative;
    display: block;
    width: 100%;
    height: 4px;
    border-radius: 2px;
    background-color: var(--bg-accent-color);
    transition: background-color .2s .3s;

    &::before,
    &::after {
      position: absolute;
      left: 0;
      width: 100%;
      height: 4px;
      border-radius: 4px;
      background-color: var(--bg-accent-color);
      transform-origin: center;
      transition: translate .3s .3s, rotate .3s;
      content: '';
    }

    &::before {
      top: 8px;
    }

    &::after {
      bottom: 8px;
    }
  }

  .navigation__toggle[aria-expanded=true] .navigation__toggle-line {
    background-color: transparent;
    transition: background-color .2s;

    &::before,
    &::after {
      transition: translate .3s, rotate .3s .3s;
    }

    &::before {
      rotate: -45deg;
      translate: 0 -8px;
    }

    &::after {
      rotate: 45deg;
      translate: 0 8px;
    }
  }

  .menu {
    @media (max-width: $mdMax) {
      position: fixed;
      top: 8px;
      bottom: 8px;
      left: 8px;
      right: 8px;
      z-index: 10;

      display: none;
      flex-direction: column;
      background: linear-gradient(145deg, var(--bg-main-color), var(--bg-main-color) 65%, var(--accent-color) 0);
      box-shadow: 0 2px 10px 0 rgba(#000, .3);
      padding: 20px;
      transition: all .2s ease-in-out;
      align-items: center;
    }

    &--opened {
      display: flex;
    }
  }

  .menu__list {
    @include ulres;

    display: flex;
    align-items: center;
    margin: auto;
    gap: 20px;


    @media (max-width: $mdMax) {
      flex-direction: column;
    }
  }

  .menu__link {
    font-family: 'Neue Machina';
    font-weight: 400;
    font-size: 20px;

    @media (min-width: $lg) {
      font-size: 12px;
    }
  }
</style>